quit
property
node
node[RDF.rest.to_s]
node[RDF.first.to_s]
node['@id']
quit
puts input.dump(:nquads, validate: false)
puts input.dump(:nquads)
input.enum_nodes
input.bnodes
c
manifest['entries'].select {|t| t['assertions'][index]['result']['outcome'] == 'earl:passed' }.length
manifest['entries'].select {|t| t['assertions'][index]['result']['outcome'] == 'earl:passed' }
manifest['entries']
manifest = tests['entries'].first
test['entries']
manifest = test['entries'].first
c
@options
expected_keys
value.keys
quit
c
s
@options
s
n
s
statements
statementes
s
n
s
n
s
n
c
b 38
n
options
s
reader
n
c
b 184
s
n
s
c
b 78
self
s
quit
quity
node['@id']
node.keys
node[RDF.rest.to_s]
node[RDF.first.to_s]
node[RDF.first.to_s].length
node[RDF.first.to_s].class
(f = node[RDF.first.to_s]).is_a?(Array) && f.length == 1
Array(node[:usages]).length == 1
node.keys.none? {|k| !["@id", '@type', :usages, RDF.first.to_s, RDF.rest.to_s].include?(k)}
              ((t = node['@type']).nil? || t == [RDF.List.to_s])
              (r = node[RDF.rest.to_s]).is_a?(Array) && r.length == 1 &&
              (f = node[RDF.first.to_s]).is_a?(Array) && f.length == 1 &&
              Array(node[:usages]).length == 1 &&
              node.keys.none? {|k| !["@id", '@type', :usages, RDF.first.to_s, RDF.rest.to_s].include?(k)} &&
              blank_node?(node) &&
              node_usages_map[node['@id']].uniq.length == 1 &&
property == RDF.rest.to_s &&
blank_node?(node)
node_usages_map[node['@id']].uniq.length == 1
property
node
quit
usage.keys.length
c
usage.keys.length
c
nil_var[:usages].length
usage.keys.length
usage.class
c
b 76
quit
c
usage
usage.keys.length
usage.class
s
nil_var[:usages]
nil_var[:usages].length
nil_var
c
pp compacted['@graph'][1]
pp compacted['@graph'][0]
compacted['@graph'][0]
compacted['@graph'].length
compacted['@graph']
compacted['@graph'].keys
compacted.keys
compacted = JSON::LD::API.compact(expanded, TEST_FRAME['@context'], expanded: true)
pp JSON::LD::API.compact(expanded, TEST_FRAME['@context'], expanded: true)
require 'pp'
pp JSON::LD::API.compact(expanded, TEST_FRAME, expanded: true)
pp expanded
require 'pp'
quit
matches
n
pp frame
c
matches
n
pp frame
require 'pp'
frame
c
quit
pp TEST_FRAME
puts TEST_FRAME
TEST_FRAME
pp json_hash
puts json
n
require 'pp'
quit
pp json_hash
puts json_hash
require 'pp'
puts json
n
c
pp json_hash
require 'pp'
c
pp json_hash
pp require 'pp'
json_hash
self.to_h
self.to_hash
c
b 435
to_hash
puts graph.dump(:ttl, streaming: true)
graph.count
